package launch;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;

import org.apache.commons.exec.CommandLine;
import org.apache.commons.exec.DefaultExecutor;
import org.apache.commons.exec.ExecuteException;
import org.apache.commons.exec.ExecuteWatchdog;
import org.apache.commons.exec.PumpStreamHandler;
import org.eclipse.core.commands.Command;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.Path;
import org.eclipse.jface.internal.InternalPolicy;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.commands.ICommandService;
import org.eclipse.ui.console.IConsoleConstants;
import org.eclipse.ui.console.IConsoleView;
import org.eclipse.ui.console.MessageConsoleStream;
import org.eclipse.ui.handlers.HandlerUtil;
import org.eclipse.ui.services.IEvaluationService;

import cn.smartcore.handlers.ControlGDBServerHandler;
import cn.smartcore.handlers.MyExecuteResultHandler;

public class LaunchSimulator {
	public void launch(String binFilePath, String simulatorProjectName, String port, String coreConfigPath) {
		String simulatorPath = null;
		String line = null;
		if (simulatorProjectName.equals("Default Simulator")) {
			if (!InternalPolicy.OSGI_AVAILABLE) {// Stand-alone case
				simulatorPath = new Path(LaunchSimulator.class.getResource(File.separator + "simu").getFile())
						.toOSString();
			}
			try {
				simulatorPath = new Path(
						FileLocator.toFileURL(LaunchSimulator.class.getResource(File.separator + "simu")).getPath())
								.toOSString();
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			if (simulatorPath.endsWith(File.separator)) {
				simulatorPath = simulatorPath.substring(0, simulatorPath.length() - 1);
			}

			try {
				ControlGDBServerHandler.copy(binFilePath,
						simulatorPath + File.separator + "ram" + File.separator + "a.bin");
			} catch (IOException e) {
				e.printStackTrace();
			}

			line = simulatorPath + File.separator + "main " + port + " " + coreConfigPath + " start " + simulatorPath
					+ File.separator + "conf" + File.separator + "conf.so";

			// String line = "gdbserver :8888 " + execFilePath;

		} else {

		}

		IWorkbenchWindow window = ControlGDBServerHandler.window;
		IWorkbenchPage page = window.getActivePage();
		ICommandService commandService = window.getWorkbench().getService(ICommandService.class);
		Command command = commandService.getCommand("controlGDBServerCommand");

		try {
			HandlerUtil.toggleCommandState(command);
		} catch (ExecutionException e) {
			e.printStackTrace();
		}

		Display.getDefault().syncExec(new Runnable() {
			@Override
			public void run() {
				String id = IConsoleConstants.ID_CONSOLE_VIEW;
				IConsoleView view = null;
				try {
					view = (IConsoleView) page.showView(id);
				} catch (PartInitException e) {
					e.printStackTrace();
				}
				view.display(ControlGDBServerHandler.smartsimuConsole);
			}
		});

		CommandLine cmdLine = CommandLine.parse(line);
		ControlGDBServerHandler.executor = new DefaultExecutor();
		ExecuteWatchdog watchdog = new ExecuteWatchdog(ExecuteWatchdog.INFINITE_TIMEOUT);
		ControlGDBServerHandler.executor.setWatchdog(watchdog);
		MessageConsoleStream outputStream = ControlGDBServerHandler.smartsimuConsole.newMessageStream();
		MessageConsoleStream errorStream = ControlGDBServerHandler.smartsimuConsole.newMessageStream();
		outputStream.setActivateOnWrite(true);
		errorStream.setActivateOnWrite(true);

		Display.getDefault().syncExec(new Runnable() {
			@Override
			public void run() {
				errorStream.setColor(new Color(null, 255, 0, 0));
			}
		});

		PumpStreamHandler streamHandler = new PumpStreamHandler(outputStream, errorStream);
		ControlGDBServerHandler.executor.setStreamHandler(streamHandler);
		MyExecuteResultHandler resultHandler = new MyExecuteResultHandler(window, command, outputStream, errorStream);

		ControlGDBServerHandler.smartsimuConsole.clearConsole();

		try {
			ControlGDBServerHandler.executor.execute(cmdLine, resultHandler);
		} catch (ExecuteException e1) {
			e1.printStackTrace();
		} catch (IOException e2) {
			e2.printStackTrace();
		}

		try {
			resultHandler.waitFor(500);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		try {
			ExecuteException e = resultHandler.getException();
			String exceptionInfo = e.getMessage();
			errorStream.println(exceptionInfo);
			return;
		} catch (IllegalStateException e) {
			outputStream.println("simu has been started");
		}

		// Read debug-config.txt and update the state of the radio command
		Command radioCommand = commandService.getCommand("selectCommand");
		File file = new File(coreConfigPath);
		String initialState = "";

		if (file.exists()) {
			try {
				BufferedReader bReader = new BufferedReader(new InputStreamReader(new FileInputStream(file)));
				try {
					initialState = bReader.readLine();
					if (initialState == null)
						initialState = "";
				} catch (IOException e) {
					e.printStackTrace();
				}
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}

		try {
			HandlerUtil.updateRadioState(radioCommand, initialState);
		} catch (ExecutionException e) {
			e.printStackTrace();
		}

		IEvaluationService evaluationService = window.getService(IEvaluationService.class);
		if (evaluationService != null)
			evaluationService.requestEvaluation("org.eclipse.ui.commands.toggleState");
	}
}
